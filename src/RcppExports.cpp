// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/irced.h"
#include <Rcpp.h>

using namespace Rcpp;

// irc_post_message
void irc_post_message(std::string server, int port, std::string server_password, bool ssl, std::string nick, std::string user, std::string real, std::string channel, CharacterVector message, std::string channel_password);
RcppExport SEXP irced_irc_post_message(SEXP serverSEXP, SEXP portSEXP, SEXP server_passwordSEXP, SEXP sslSEXP, SEXP nickSEXP, SEXP userSEXP, SEXP realSEXP, SEXP channelSEXP, SEXP messageSEXP, SEXP channel_passwordSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type server(serverSEXP);
    Rcpp::traits::input_parameter< int >::type port(portSEXP);
    Rcpp::traits::input_parameter< std::string >::type server_password(server_passwordSEXP);
    Rcpp::traits::input_parameter< bool >::type ssl(sslSEXP);
    Rcpp::traits::input_parameter< std::string >::type nick(nickSEXP);
    Rcpp::traits::input_parameter< std::string >::type user(userSEXP);
    Rcpp::traits::input_parameter< std::string >::type real(realSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel(channelSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type message(messageSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel_password(channel_passwordSEXP);
    irc_post_message(server, port, server_password, ssl, nick, user, real, channel, message, channel_password);
    return R_NilValue;
END_RCPP
}
// disconnect_irc
void disconnect_irc(Rcpp::XPtr<IRC> irc);
RcppExport SEXP irced_disconnect_irc(SEXP ircSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    disconnect_irc(irc);
    return R_NilValue;
END_RCPP
}
// connect_irc
Rcpp::XPtr<IRC> connect_irc(std::string server, int port, std::string server_password, bool ssl, std::string nick, std::string user, std::string real);
RcppExport SEXP irced_connect_irc(SEXP serverSEXP, SEXP portSEXP, SEXP server_passwordSEXP, SEXP sslSEXP, SEXP nickSEXP, SEXP userSEXP, SEXP realSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type server(serverSEXP);
    Rcpp::traits::input_parameter< int >::type port(portSEXP);
    Rcpp::traits::input_parameter< std::string >::type server_password(server_passwordSEXP);
    Rcpp::traits::input_parameter< bool >::type ssl(sslSEXP);
    Rcpp::traits::input_parameter< std::string >::type nick(nickSEXP);
    Rcpp::traits::input_parameter< std::string >::type user(userSEXP);
    Rcpp::traits::input_parameter< std::string >::type real(realSEXP);
    rcpp_result_gen = Rcpp::wrap(connect_irc(server, port, server_password, ssl, nick, user, real));
    return rcpp_result_gen;
END_RCPP
}
// irc_bot
void irc_bot(Rcpp::XPtr<IRC> irc, std::string server, int port, std::string server_password, bool ssl, std::string nick, std::string user, std::string real, std::string channel, CharacterVector message, std::string channel_password, std::string bot_func);
RcppExport SEXP irced_irc_bot(SEXP ircSEXP, SEXP serverSEXP, SEXP portSEXP, SEXP server_passwordSEXP, SEXP sslSEXP, SEXP nickSEXP, SEXP userSEXP, SEXP realSEXP, SEXP channelSEXP, SEXP messageSEXP, SEXP channel_passwordSEXP, SEXP bot_funcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type server(serverSEXP);
    Rcpp::traits::input_parameter< int >::type port(portSEXP);
    Rcpp::traits::input_parameter< std::string >::type server_password(server_passwordSEXP);
    Rcpp::traits::input_parameter< bool >::type ssl(sslSEXP);
    Rcpp::traits::input_parameter< std::string >::type nick(nickSEXP);
    Rcpp::traits::input_parameter< std::string >::type user(userSEXP);
    Rcpp::traits::input_parameter< std::string >::type real(realSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel(channelSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type message(messageSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel_password(channel_passwordSEXP);
    Rcpp::traits::input_parameter< std::string >::type bot_func(bot_funcSEXP);
    irc_bot(irc, server, port, server_password, ssl, nick, user, real, channel, message, channel_password, bot_func);
    return R_NilValue;
END_RCPP
}
// bot_connect_int
Rcpp::XPtr<IRC> bot_connect_int(std::string server, int port, std::string server_password, bool ssl, std::string nick, std::string user, std::string real);
RcppExport SEXP irced_bot_connect_int(SEXP serverSEXP, SEXP portSEXP, SEXP server_passwordSEXP, SEXP sslSEXP, SEXP nickSEXP, SEXP userSEXP, SEXP realSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type server(serverSEXP);
    Rcpp::traits::input_parameter< int >::type port(portSEXP);
    Rcpp::traits::input_parameter< std::string >::type server_password(server_passwordSEXP);
    Rcpp::traits::input_parameter< bool >::type ssl(sslSEXP);
    Rcpp::traits::input_parameter< std::string >::type nick(nickSEXP);
    Rcpp::traits::input_parameter< std::string >::type user(userSEXP);
    Rcpp::traits::input_parameter< std::string >::type real(realSEXP);
    rcpp_result_gen = Rcpp::wrap(bot_connect_int(server, port, server_password, ssl, nick, user, real));
    return rcpp_result_gen;
END_RCPP
}
// bot_cmd_quit
void bot_cmd_quit(Rcpp::XPtr<IRC> irc, std::string reason);
RcppExport SEXP irced_bot_cmd_quit(SEXP ircSEXP, SEXP reasonSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type reason(reasonSEXP);
    bot_cmd_quit(irc, reason);
    return R_NilValue;
END_RCPP
}
// bot_cmd_join
void bot_cmd_join(Rcpp::XPtr<IRC> irc, std::string channel, std::string password);
RcppExport SEXP irced_bot_cmd_join(SEXP ircSEXP, SEXP channelSEXP, SEXP passwordSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel(channelSEXP);
    Rcpp::traits::input_parameter< std::string >::type password(passwordSEXP);
    bot_cmd_join(irc, channel, password);
    return R_NilValue;
END_RCPP
}
// bot_cmd_part
void bot_cmd_part(Rcpp::XPtr<IRC> irc, std::string channel);
RcppExport SEXP irced_bot_cmd_part(SEXP ircSEXP, SEXP channelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel(channelSEXP);
    bot_cmd_part(irc, channel);
    return R_NilValue;
END_RCPP
}
// bot_cmd_invite
void bot_cmd_invite(Rcpp::XPtr<IRC> irc, std::string nick, std::string channel);
RcppExport SEXP irced_bot_cmd_invite(SEXP ircSEXP, SEXP nickSEXP, SEXP channelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type nick(nickSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel(channelSEXP);
    bot_cmd_invite(irc, nick, channel);
    return R_NilValue;
END_RCPP
}
// bot_cmd_names
void bot_cmd_names(Rcpp::XPtr<IRC> irc, std::string channel);
RcppExport SEXP irced_bot_cmd_names(SEXP ircSEXP, SEXP channelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel(channelSEXP);
    bot_cmd_names(irc, channel);
    return R_NilValue;
END_RCPP
}
// bot_cmd_list
void bot_cmd_list(Rcpp::XPtr<IRC> irc, std::string channel);
RcppExport SEXP irced_bot_cmd_list(SEXP ircSEXP, SEXP channelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel(channelSEXP);
    bot_cmd_list(irc, channel);
    return R_NilValue;
END_RCPP
}
// bot_cmd_topic
void bot_cmd_topic(Rcpp::XPtr<IRC> irc, std::string channel, std::string topic);
RcppExport SEXP irced_bot_cmd_topic(SEXP ircSEXP, SEXP channelSEXP, SEXP topicSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel(channelSEXP);
    Rcpp::traits::input_parameter< std::string >::type topic(topicSEXP);
    bot_cmd_topic(irc, channel, topic);
    return R_NilValue;
END_RCPP
}
// bot_cmd_channel
void bot_cmd_channel(Rcpp::XPtr<IRC> irc, std::string channel, std::string mode);
RcppExport SEXP irced_bot_cmd_channel(SEXP ircSEXP, SEXP channelSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel(channelSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    bot_cmd_channel(irc, channel, mode);
    return R_NilValue;
END_RCPP
}
// bot_cmd_user
void bot_cmd_user(Rcpp::XPtr<IRC> irc, std::string mode);
RcppExport SEXP irced_bot_cmd_user(SEXP ircSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    bot_cmd_user(irc, mode);
    return R_NilValue;
END_RCPP
}
// bot_cmd_nick
void bot_cmd_nick(Rcpp::XPtr<IRC> irc, std::string newnick);
RcppExport SEXP irced_bot_cmd_nick(SEXP ircSEXP, SEXP newnickSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type newnick(newnickSEXP);
    bot_cmd_nick(irc, newnick);
    return R_NilValue;
END_RCPP
}
// bot_cmd_whois
void bot_cmd_whois(Rcpp::XPtr<IRC> irc, std::string nick);
RcppExport SEXP irced_bot_cmd_whois(SEXP ircSEXP, SEXP nickSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type nick(nickSEXP);
    bot_cmd_whois(irc, nick);
    return R_NilValue;
END_RCPP
}
// bot_cmd_msg
void bot_cmd_msg(Rcpp::XPtr<IRC> irc, std::string channel, std::string message);
RcppExport SEXP irced_bot_cmd_msg(SEXP ircSEXP, SEXP channelSEXP, SEXP messageSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel(channelSEXP);
    Rcpp::traits::input_parameter< std::string >::type message(messageSEXP);
    bot_cmd_msg(irc, channel, message);
    return R_NilValue;
END_RCPP
}
// bot_cmd_me
void bot_cmd_me(Rcpp::XPtr<IRC> irc, std::string channel, std::string message);
RcppExport SEXP irced_bot_cmd_me(SEXP ircSEXP, SEXP channelSEXP, SEXP messageSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel(channelSEXP);
    Rcpp::traits::input_parameter< std::string >::type message(messageSEXP);
    bot_cmd_me(irc, channel, message);
    return R_NilValue;
END_RCPP
}
// bot_cmd_notice
void bot_cmd_notice(Rcpp::XPtr<IRC> irc, std::string channel, std::string message);
RcppExport SEXP irced_bot_cmd_notice(SEXP ircSEXP, SEXP channelSEXP, SEXP messageSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel(channelSEXP);
    Rcpp::traits::input_parameter< std::string >::type message(messageSEXP);
    bot_cmd_notice(irc, channel, message);
    return R_NilValue;
END_RCPP
}
// bot_cmd_kick
void bot_cmd_kick(Rcpp::XPtr<IRC> irc, std::string nick, std::string channel, std::string reason);
RcppExport SEXP irced_bot_cmd_kick(SEXP ircSEXP, SEXP nickSEXP, SEXP channelSEXP, SEXP reasonSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<IRC> >::type irc(ircSEXP);
    Rcpp::traits::input_parameter< std::string >::type nick(nickSEXP);
    Rcpp::traits::input_parameter< std::string >::type channel(channelSEXP);
    Rcpp::traits::input_parameter< std::string >::type reason(reasonSEXP);
    bot_cmd_kick(irc, nick, channel, reason);
    return R_NilValue;
END_RCPP
}
